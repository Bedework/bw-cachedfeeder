<?xml version="1.0"?>

<!-- This is the main build file for the webcache server and the urlbuilder client.

     Authors: Barry leibson   bleibson at girasolesolutions dot com
-->

<project name="webcache" default="deploy">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <property environment="env"/>
  <!-- These may already be set from calling dir -->
  <dirname property="org.bedework.project.webcache" file="${ant.file}"/>
  <dirname property="project.home" file="${ant.file}"/>

  <property file="${project.home}/build.properties" />

  <property name="project.name" value="${org.bedework.package.name}"/>
  <property name="project.version" value="${org.bedework.version}"/>

  <property name="dist.home" location="${project.home}/dist"/>
  <property name="lib.dir" location="${project.home}/lib"/>

  <property name="build.dir" location="${project.home}/build"/>
  <property name="buildjar" location="${build.dir}/buildTools/buildjar.xml"/>
  <property name="buildwar" location="${build.dir}/buildwar.xml"/>
  <property name="buildsh" location="${build.dir}/buildsh.xml"/>

  <property name="resources.dir" location="${project.home}/resources"/>

  <property name="org.bedework.temp.dir"
            location="${dist.home}/temp" />
  
  <delete dir="${org.bedework.temp.dir}" />
  <mkdir dir="${org.bedework.temp.dir}" />

  <property name="org.bedework.libcache.dir"
            location="${project.home}/libcache"/>

  <import file="${build.dir}/buildTools/getJar.xml"/>
  <import file="${build.dir}/loadDeployConfig.xml"/>

	<!--
  <property name="org.bedework.deployutil.jar"
            location="${build.dir}/${org.bedework.deployutil.jar.name}-${project.version}.jar" />
            -->
  <property name="org.bedework.deployutil.jar"
            location="${build.dir}/bw-deployutil-3.6.jar" />

  <!-- =================================================================
       init:
       ================================================================= -->

  <target name="init">
    <property name="org.bedework.project.bedework"
  	          location="${project.home}/../bedework" />

  	<loadDeployConfig />

    <property name="org.bedework.temp.wars.home"
              location="${dist.home}/temp/wars" />
  	
    <if>
      <not>
        <isset property="org.bedework.global.context.roots" />
      </not>
      <then>
        <tempfile property="org.bedework.global.context.roots"
                  destdir="${org.bedework.temp.dir}"
                  prefix="context-roots" suffix=".properties" />
      </then>
    </if>

    <echo message="*** Options file: ${org.bedework.webcache.options}" />

    <property name="org.bedework.webcache.server.base"
              location="${project.home}/server" />

    <property name="org.bedework.webcache.dumpres.base"
              location="${project.home}/dumpres" />

    <property name="org.bedework.webcache.tools.base"
              location="${project.home}/tools" />

    <mkdir dir="${dist.home}" />

    <property name="test.data.dir"
              location="${dist.home}/test-data" />

    <property name="edu.rpi.cmt.empty.dir"
              location="${dist.home}/empty-dir" />
    <mkdir dir="${edu.rpi.cmt.empty.dir}" />

    <fileset id="empty.fileset" dir="${edu.rpi.cmt.empty.dir}"
             excludes="*" />

    <!-- default to empty -->
    <fileset id="buildjar.resource.files" refid="empty.fileset" />
    <fileset id="buildjar.generated.java.sources" refid="empty.fileset" />

    <property name="server.jar"
              location="${dist.home}/${edu.rpi.cmt.webcache.server.jar}-${project.version}.jar" />

    <property name="dumpres.jar"
              location="${dist.home}/${edu.rpi.cmt.webcache.dumpres.jar}-${project.version}.jar" />

    <property name="tools.jar"
              location="${dist.home}/${edu.rpi.cmt.webcache.tools.jar}-${project.version}.jar" />
  </target>
	
  <target name="build-init" depends="init">
    <delete dir="${lib.dir}" />
    <mkdir dir="${lib.dir}" />

    <property name="org.bedework.getjar.property.prefix"
              value="org.bedework.appjar" />

    <!-- <getJar name="commons-codec" version="1.3" />
    

    <getJar name="rpiaccess" version="3.6" project="access"
            projecthome="${project.home}/../bedework/projects/access" />  -->

    <!-- ==================== Compilation Classpath ==================== -->

    <path id="compile.classpath">
      <fileset dir="${lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${dist.home}">
         <include name="*.jar"/>
      </fileset>
    </path>
  </target>
    
	<target name="deploy-init" depends="init">
    <!-- ========= Stuff in main bedework deployment build file =========   -->
    <!-- Where we put ear stuff -->
    
	  <property name="org.bedework.temp.shellscr.home"
	            location="${org.bedework.temp.dir}/shellscr" />

    <property name="org.bedework.temp.extrajars.dir"
              location="${org.bedework.temp.dir}/extrajars" />

    <!-- Preserve extra jars for ear builds -->
    <property name="org.bedework.temp.ear.extrajars.dir"
              location="${org.bedework.temp.dir}/earextrajars" />
    
    <property name="org.bedework.global.context.roots"
              location="${org.bedework.temp.dir}/context-roots.properties" />

    <!-- ===== End of stuff in main bedework deployment build file ======   -->
		
    <!-- Clean up before we start -->
    <delete dir="${org.bedework.temp.wars.home}" />
    <mkdir dir="${org.bedework.temp.wars.home}" />
  </target>

  <!-- =================================================================
       Clean out all library files from other projects and all generated
       files in preparation for a complete rebuild.

       Needed because switching versions leaves a load of old bedework
       generated stuff in the libraries.
       ================================================================= -->
  <target name="deep-clean" depends="clean">
    <delete dir="${lib.dir}" />
  </target>

  <!-- =================================================================
       Clean all generated files
       ================================================================= -->
  <target name="clean">
    <delete dir="${dist.home}" />
  </target>

  <!-- =================================================================
       Clean up after a build.
       ================================================================= -->
  <target name="cleanup">
    <delete dir="${edu.rpi.cmt.empty.dir}" />
  </target>

  <!-- ========================== Base build Targets ===================
       Here we have one target building the classes and interfaces that make
       up the access control suite.
       ================================================================= -->

  <target name="clean-build" depends="clean,build"
          description="Clean and compile webcache"/>

  <target name="clean-build-all" depends="clean,build-all"
          description="Clean and compile webcache"/>

  <target name="build" depends="build-source,cleanup"
          description="Compile webcache"/>

  <!-- ===================== build.all Target ===============================
     This target builds jar files ready for the deploy target.
     =================================================================== -->

  <target name="build-all" depends="build-source,cleanup"
          description="Compile webcache"/>

  <target name="build-source" 
  	      depends="build-init,bld.auth.server,bld.unauth.server,bld.dumpres,bld.tools" />

  <!-- ===================== deploy Target ===============================
     Deploy if an application server is defined.
     =================================================================== -->

  <target name="deploy-urlbuilder" depends="init"
          description="Deploy address book client">
  	<delete dir="${org.bedework.appserver.dir}/${org.bedework.server.resource.root.dir}/URLandWidgetBuilder" />
  	
  	<copy todir="${org.bedework.appserver.dir}/${org.bedework.server.resource.root.dir}/URLandWidgetBuilder" >
  		<fileset dir="URLandWidgetBuilder"/>
    </copy>
	</target>
	
  <target name="deploy" depends="deploy-init,build-all,deploy-addrbook"
  	      description="Deploy webcache">
    <ant antfile="deploy.xml" target="deployFiles" inheritRefs="true" />
    <if>
      <isset property="org.bedework.appserver.deploy.dir"/>
      <then>
        <delete dir="${org.bedework.appserver.deploy.dir}/${org.bedework.app.webcache.war.name}" />

        <copy todir="${org.bedework.appserver.deploy.dir}">
          <fileset dir="${dist.home}">
        	  <include name="*.war" />
         </fileset>
        </copy>
      </then>
      <else>
        <echo message="********* No deploy directory defined" />
      </else>
    </if>
    <!-- <getJar lib="${org.bedework.temp.extrajars.dir}"
            libcache="${org.bedework.libcache.dir}"
            name="????????" version="3.6"
            projecthome="${project.home}" /> -->

    <ant antfile="${buildsh}" target="build" inheritRefs="true" >
      <property name="propval.app.zip.name"
                value="${tools.app.zip.name}" />
      <property name="app.service.base" 
                location="${org.bedework.carddav.tools.base}" />
      <property name="app.global.properties.dir" 
                location="${org.bedework.carddav.tools.base}/resources" />
      <property name="org.bedework.deploy.name" 
                value="tools" />
   </ant>
  	
    <ant antfile="deployTermination.xml" target="deployTerminate" inheritRefs="true" />
  </target>

<!-- ==================== Javadoc Target ===============================
     The "javadoc" target creates Javadoc API documentation for the Java
     classes included in your application.  Normally, this is only required
     when preparing a distribution release, but is available as a separate
     target in case the developer wants to create Javadocs independently.
     =================================================================== -->

  <target name="javadoc" depends="init"
          description="Create Javadoc API documentation">
    <property name="destdir" location="${dist.home}/docs/api"/>
    <mkdir dir="${destdir}"/>

    <javadoc sourcepath="${org.bedework.caldav.server.base}/src:"
           classpathref="compile.classpath"
                destdir="${destdir}"
           packagenames="org.bedework.*,
                         edu.rpi.*"
                 access="public"
                 author="true"
                version="true"
          breakiterator="yes"
            windowtitle="${project.name} ${project.version} API Documentation">
      <doctitle><![CDATA[${project.name} ${project.version}<br/>API Documentation]]></doctitle>
      <header><![CDATA[${project.name} ${project.version}<br/>API Documentation]]></header>
      <link href="../../access/api" />
      <link href="../../calendarapi/api" />
      <link href="../../davutil/api" />
      <link href="../../rpiutil/api" />
      <link href="../../webdav/api" />
      <link href="${env.JAVA_HOME}/docs/api" />
    </javadoc>
  </target>

  <!-- ===================== internal build targets ====================
       ================================================================= -->

  <target name="bld.server">
    <ant antfile="${org.bedework.carddav.server.base}/build.xml" inheritrefs="true"
         target="build" />

    <!-- ===============================================================
         Build the webcache war
         =============================================================== -->

    <property name="app.sou.dir"
              location="${org.bedework.carddav.server.base}" />

    <ant antfile="${buildwar}" inheritRefs="true" target="build" >
      <property name="propval.app.context.root"
                value="${org.bedework.app.webcache.war.name}" />
      <property name="propval.app.war.name"
                value="${org.bedework.app.webcache.war.name}" />
      <property name="propval.app.web.xml"
                location="${app.sou.dir}/war/WEB-INF/userweb.xml" />

      <property name="org.bedework.deploy.name"
                value="webcache" />
    </ant>
  </target>

</project>
